#  Copyright (C) 2016,2017,2018 by Andy Uribe CA6JAU
#  Copyright (C) 2016 by Jim McLaughlin KI6ZUM

#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.

#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

# MMDVM source files
MMDVM_PATH=.

# Directory Structure
BINDIR=bin
OBJDIR_HACKRF=obj_hackrf

# Output files
BINELF_HACKRF=mmdvm_hackrf

# GNU ARM Embedded Toolchain
CC=gcc
CXX=g++
LD=ld
AR=ar
AS=as
CP=objcopy
OD=objdump
NM=nm
SIZE=size
A2L=addr2line

# "SystemRoot" is only defined in Windows
ifdef SYSTEMROOT
	CLEANCMD=del /S *.o *.hex *.bin *.elf GitVersion.h
	MDDIRS=md $@
else ifdef SystemRoot
	CLEANCMD=del /S *.o *.hex *.bin *.elf GitVersion.h
	MDDIRS=md $@
else
	CLEANCMD=rm -f $(OBJ_HACKRF) $(BINDIR)/*.hex $(BINDIR)/*.bin $(BINDIR)/*.elf GitVersion.h
	MDDIRS=mkdir $@
endif

# Default reference oscillator frequencies
ifndef $(OSC)
	ifeq ($(MAKECMDGOALS),pi)
		OSC=$(CLK_MMDVM_PI)
	else ifeq ($(MAKECMDGOALS),pi-f722)
		OSC=$(CLK_MMDVM_PI)
	else
		OSC=$(CLK_NUCLEO)
	endif
endif

# Build object lists
CXXSRC=$(wildcard $(MMDVM_PATH)/*.cpp)
CSRC_STD_HACKRF=$(wildcard $(STD_LIB_HACKRF)/*.c)
SYS_HACKRF=$(wildcard $(SYS_DIR_HACKRF)/*.c)
STARTUP_HACKRF=$(wildcard $(STARTUP_DIR_HACKRF)/*.c)
OBJ_HACKRF=$(CXXSRC:$(MMDVM_PATH)/%.cpp=$(OBJDIR_HACKRF)/%.o) $(CSRC_STD_HACKRF:$(STD_LIB_HACKRF)/%.c=$(OBJDIR_HACKRF)/%.o) $(SYS_HACKRF:$(SYS_DIR_HACKRF)/%.c=$(OBJDIR_HACKRF)/%.o) $(STARTUP_HACKRF:$(STARTUP_DIR_HACKRF)/%.c=$(OBJDIR_HACKRF)/%.o)

# MCU flags
MCFLAGS_HACKRF=-lrt -lm -lpthread -lhackrf

# Compile flags
DEFS_HACKRF=-DMADEBYMAKEFILE -DHACKRF

# Build compiler flags
CFLAGS_HACKRF=-c $(MCFLAGS_HACKRF) $(INCLUDES_HACKRF)
CXXFLAGS_HACKRF=-c $(MCFLAGS_HACKRF) $(INCLUDES_HACKRF)

# Linker flags
LDFLAGS_HACKRF = $(MCFLAGS_HACKRF) $(INCLUDES_LIBS_HACKRF)

# Common flags
CFLAGS=-Os -ffunction-sections -fdata-sections -fno-builtin -Wno-implicit -DCUSTOM_NEW -DNO_EXCEPTIONS
CXXFLAGS=-Os -fno-exceptions -ffunction-sections -fdata-sections -fno-builtin -fno-rtti -DCUSTOM_NEW -DNO_EXCEPTIONS
LDFLAGS=-Os

# Build Rules
.PHONY: all 

all: hackrf

hackrf: GitVersion.h
hackrf: CFLAGS+=$(CFLAGS_HACKRF) $(DEFS_HACKRF)
hackrf: CXXFLAGS+=$(CXXFLAGS_HACKRF) $(DEFS_HACKRF)
hackrf: LDFLAGS+=$(LDFLAGS_HACKRF)
hackrf: release_hackrf

release_hackrf: $(BINDIR)
release_hackrf: $(OBJDIR_HACKRF)
release_hackrf: $(BINDIR)/$(BINELF_HACKRF)

$(BINDIR):
	$(MDDIRS)

$(OBJDIR_HACKRF):
	$(MDDIRS)

$(BINDIR)/$(BINELF_HACKRF): $(OBJ_HACKRF)
	$(CXX) $(OBJ_HACKRF) $(LDFLAGS) -o $@
	@echo "Linking complete!\n"
	$(SIZE) $(BINDIR)/$(BINELF_HACKRF)

$(OBJDIR_HACKRF)/%.o: $(MMDVM_PATH)/%.cpp
	$(CXX) $(CXXFLAGS) $< -o $@
	@echo "Compiled "$<"!\n"

$(OBJDIR_HACKRF)/%.o: $(STD_LIB_HACKRF)/%.c
	$(CC) $(CFLAGS) $< -o $@
	@echo "Compiled "$<"!\n"

$(OBJDIR_HACKRF)/%.o: $(SYS_DIR_HACKRF)/%.c
	$(CC) $(CFLAGS) $< -o $@
	@echo "Compiled "$<"!\n"

$(OBJDIR_HACKRF)/%.o: $(STARTUP_DIR_HACKRF)/%.c
	$(CC) $(CFLAGS) $< -o $@
	@echo "Compiled "$<"!\n"

clean:
	$(CLEANCMD)

# Export the current git version if the index file exists, else 000...
GitVersion.h:
ifdef SYSTEMROOT
	echo #define GITVERSION "0000000" > $@
else ifdef SystemRoot
	echo #define GITVERSION "0000000" > $@
else
ifneq ("$(wildcard .git/index)","")
	echo "#define GITVERSION \"$(shell git rev-parse --short HEAD)\"" > $@
else
	echo "#define GITVERSION \"0000000\"" > $@
endif
endif
